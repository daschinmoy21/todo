PostgreSQL Database Access Guide
===============================

1. Accessing the Database Container
---------------------------------
# Connect to the PostgreSQL container
docker exec -it todo-postgres-1 bash

# Once inside the container, connect to PostgreSQL as the postgres user
psql -U postgres

# Connect directly to the database (alternative method)
docker exec -it todo-postgres-1 psql -U postgres -d tododb


2. Basic PostgreSQL Commands
--------------------------
# List all databases
\l

# Connect to tododb database
\c tododb

# List all tables
\dt

# Show table structure
\d+ table_name
Example: \d+ users

# Exit psql
\q


3. Useful SQL Queries
-------------------
# View all users
SELECT * FROM users;

# View all boards
SELECT * FROM boards;

# View all lists
SELECT * FROM lists;

# View all tasks
SELECT * FROM tasks;

# View all board messages
SELECT * FROM board_chat_messages;

# View board members
SELECT * FROM board_members;

# View card comments
SELECT * FROM card_comments;


4. Common Modifications
---------------------
# Add a new user manually
INSERT INTO users (email, password) VALUES ('test@example.com', 'hashedpassword');

# Delete a user
DELETE FROM users WHERE email = 'test@example.com';

# Update a board title
UPDATE boards SET title = 'New Title' WHERE id = 1;

# Delete a board and all its contents
DELETE FROM boards WHERE id = 1;

# Reset a user's password (replace 'newhashpassword' with actual bcrypt hash)
UPDATE users SET password = 'newhashpassword' WHERE email = 'user@example.com';


5. Advanced Queries
-----------------
# View all boards with their lists and tasks
SELECT 
    b.title as board_title,
    l.title as list_title,
    t.title as task_title
FROM boards b
LEFT JOIN lists l ON b.id = l.board_id
LEFT JOIN tasks t ON l.id = t.list_id
ORDER BY b.id, l.position, t.position;

# View all users and their board count
SELECT 
    u.email,
    COUNT(b.id) as board_count
FROM users u
LEFT JOIN boards b ON u.id = b.user_id
GROUP BY u.id, u.email;

# View all messages with user information
SELECT 
    m.message_text,
    u.email,
    m.created_at
FROM board_chat_messages m
JOIN users u ON m.user_id = u.id
ORDER BY m.created_at DESC;


6. Database Maintenance
---------------------
# Vacuum the database (cleanup and optimize)
VACUUM ANALYZE;

# Reset auto-increment counters
ALTER SEQUENCE users_id_seq RESTART WITH 1;
ALTER SEQUENCE boards_id_seq RESTART WITH 1;
ALTER SEQUENCE lists_id_seq RESTART WITH 1;
ALTER SEQUENCE tasks_id_seq RESTART WITH 1;


7. Backup and Restore
-------------------
# Create backup (from host machine)
docker exec -t todo-postgres-1 pg_dump -U postgres tododb > backup.sql

# Restore backup (from host machine)
cat backup.sql | docker exec -i todo-postgres-1 psql -U postgres -d tododb


8. Troubleshooting
----------------
# Check database size
SELECT pg_size_pretty(pg_database_size('tododb'));

# Check table sizes
SELECT 
    relname as table_name,
    pg_size_pretty(pg_total_relation_size(relid)) as total_size
FROM pg_catalog.pg_statio_user_tables
ORDER BY pg_total_relation_size(relid) DESC;

# Check active connections
SELECT * FROM pg_stat_activity WHERE datname = 'tododb';

Note: Replace 'todo-postgres-1' with your actual container name if different.
The container name can be found using 'docker ps' command. 

9. Database Schema Documentation
------------------------------

ER Diagram
----------
[Place your ER diagram image here]

Entity Sets:
- Users (id, email, password, created_at)
- Boards (id, title, user_id, created_at)
- Lists (id, title, board_id, position, created_at)
- Tasks (id, title, description, list_id, position, due_date, created_at)
- BoardMembers (id, board_id, user_id, role, created_at)
- BoardChatMessages (id, board_id, user_id, message_text, created_at)
- CardComments (id, task_id, user_id, comment_text, created_at)

Relational Schema
----------------
Users (_id_, email, password, created_at)
Boards (_id_, title, user_id, created_at)
    FK: user_id references Users(id)
Lists (_id_, title, board_id, position, created_at)
    FK: board_id references Boards(id)
Tasks (_id_, title, description, list_id, position, due_date, created_at)
    FK: list_id references Lists(id)
BoardMembers (_id_, board_id, user_id, role, created_at)
    FK: board_id references Boards(id)
    FK: user_id references Users(id)
BoardChatMessages (_id_, board_id, user_id, message_text, created_at)
    FK: board_id references Boards(id)
    FK: user_id references Users(id)
CardComments (_id_, task_id, user_id, comment_text, created_at)
    FK: task_id references Tasks(id)
    FK: user_id references Users(id)

Functional Dependencies
---------------------
Users: id → {email, password, created_at}
Boards: id → {title, user_id, created_at}
Lists: id → {title, board_id, position, created_at}
Tasks: id → {title, description, list_id, position, due_date, created_at}
BoardMembers: id → {board_id, user_id, role, created_at}
BoardChatMessages: id → {board_id, user_id, message_text, created_at}
CardComments: id → {task_id, user_id, comment_text, created_at}

Normalization Applied
-------------------
The database is in 3NF (Third Normal Form):
1. All tables have primary keys (1NF)
2. No partial dependencies exist (2NF)
3. No transitive dependencies exist (3NF)
